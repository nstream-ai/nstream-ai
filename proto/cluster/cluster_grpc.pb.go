// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/cluster.proto

package cluster

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ClusterService_ListClusters_FullMethodName        = "/cluster.ClusterService/ListClusters"
	ClusterService_VerifyClusterExists_FullMethodName = "/cluster.ClusterService/VerifyClusterExists"
	ClusterService_GetClusterDetails_FullMethodName   = "/cluster.ClusterService/GetClusterDetails"
	ClusterService_CreateCluster_FullMethodName       = "/cluster.ClusterService/CreateCluster"
)

// ClusterServiceClient is the client API for ClusterService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Cluster service definition
type ClusterServiceClient interface {
	// ListClusters retrieves a list of available clusters
	ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error)
	// VerifyClusterExists checks if a specific cluster exists
	VerifyClusterExists(ctx context.Context, in *VerifyClusterExistsRequest, opts ...grpc.CallOption) (*VerifyClusterExistsResponse, error)
	// GetClusterDetails retrieves detailed information about a specific cluster
	GetClusterDetails(ctx context.Context, in *GetClusterDetailsRequest, opts ...grpc.CallOption) (*GetClusterDetailsResponse, error)
	// CreateCluster creates a new cluster
	CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*CreateClusterResponse, error)
}

type clusterServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewClusterServiceClient(cc grpc.ClientConnInterface) ClusterServiceClient {
	return &clusterServiceClient{cc}
}

func (c *clusterServiceClient) ListClusters(ctx context.Context, in *ListClustersRequest, opts ...grpc.CallOption) (*ListClustersResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListClustersResponse)
	err := c.cc.Invoke(ctx, ClusterService_ListClusters_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) VerifyClusterExists(ctx context.Context, in *VerifyClusterExistsRequest, opts ...grpc.CallOption) (*VerifyClusterExistsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyClusterExistsResponse)
	err := c.cc.Invoke(ctx, ClusterService_VerifyClusterExists_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) GetClusterDetails(ctx context.Context, in *GetClusterDetailsRequest, opts ...grpc.CallOption) (*GetClusterDetailsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClusterDetailsResponse)
	err := c.cc.Invoke(ctx, ClusterService_GetClusterDetails_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *clusterServiceClient) CreateCluster(ctx context.Context, in *CreateClusterRequest, opts ...grpc.CallOption) (*CreateClusterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateClusterResponse)
	err := c.cc.Invoke(ctx, ClusterService_CreateCluster_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ClusterServiceServer is the server API for ClusterService service.
// All implementations must embed UnimplementedClusterServiceServer
// for forward compatibility.
//
// Cluster service definition
type ClusterServiceServer interface {
	// ListClusters retrieves a list of available clusters
	ListClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error)
	// VerifyClusterExists checks if a specific cluster exists
	VerifyClusterExists(context.Context, *VerifyClusterExistsRequest) (*VerifyClusterExistsResponse, error)
	// GetClusterDetails retrieves detailed information about a specific cluster
	GetClusterDetails(context.Context, *GetClusterDetailsRequest) (*GetClusterDetailsResponse, error)
	// CreateCluster creates a new cluster
	CreateCluster(context.Context, *CreateClusterRequest) (*CreateClusterResponse, error)
	mustEmbedUnimplementedClusterServiceServer()
}

// UnimplementedClusterServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedClusterServiceServer struct{}

func (UnimplementedClusterServiceServer) ListClusters(context.Context, *ListClustersRequest) (*ListClustersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListClusters not implemented")
}
func (UnimplementedClusterServiceServer) VerifyClusterExists(context.Context, *VerifyClusterExistsRequest) (*VerifyClusterExistsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyClusterExists not implemented")
}
func (UnimplementedClusterServiceServer) GetClusterDetails(context.Context, *GetClusterDetailsRequest) (*GetClusterDetailsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClusterDetails not implemented")
}
func (UnimplementedClusterServiceServer) CreateCluster(context.Context, *CreateClusterRequest) (*CreateClusterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateCluster not implemented")
}
func (UnimplementedClusterServiceServer) mustEmbedUnimplementedClusterServiceServer() {}
func (UnimplementedClusterServiceServer) testEmbeddedByValue()                        {}

// UnsafeClusterServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ClusterServiceServer will
// result in compilation errors.
type UnsafeClusterServiceServer interface {
	mustEmbedUnimplementedClusterServiceServer()
}

func RegisterClusterServiceServer(s grpc.ServiceRegistrar, srv ClusterServiceServer) {
	// If the following call pancis, it indicates UnimplementedClusterServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ClusterService_ServiceDesc, srv)
}

func _ClusterService_ListClusters_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListClustersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).ListClusters(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterService_ListClusters_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).ListClusters(ctx, req.(*ListClustersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_VerifyClusterExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyClusterExistsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).VerifyClusterExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterService_VerifyClusterExists_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).VerifyClusterExists(ctx, req.(*VerifyClusterExistsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_GetClusterDetails_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClusterDetailsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).GetClusterDetails(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterService_GetClusterDetails_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).GetClusterDetails(ctx, req.(*GetClusterDetailsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ClusterService_CreateCluster_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateClusterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ClusterServiceServer).CreateCluster(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ClusterService_CreateCluster_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ClusterServiceServer).CreateCluster(ctx, req.(*CreateClusterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ClusterService_ServiceDesc is the grpc.ServiceDesc for ClusterService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ClusterService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cluster.ClusterService",
	HandlerType: (*ClusterServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListClusters",
			Handler:    _ClusterService_ListClusters_Handler,
		},
		{
			MethodName: "VerifyClusterExists",
			Handler:    _ClusterService_VerifyClusterExists_Handler,
		},
		{
			MethodName: "GetClusterDetails",
			Handler:    _ClusterService_GetClusterDetails_Handler,
		},
		{
			MethodName: "CreateCluster",
			Handler:    _ClusterService_CreateCluster_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cluster.proto",
}

const (
	BucketService_ListBuckets_FullMethodName            = "/cluster.BucketService/ListBuckets"
	BucketService_VerifyBucketAccess_FullMethodName     = "/cluster.BucketService/VerifyBucketAccess"
	BucketService_CheckResourceReadiness_FullMethodName = "/cluster.BucketService/CheckResourceReadiness"
)

// BucketServiceClient is the client API for BucketService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Bucket service definition
type BucketServiceClient interface {
	// ListBuckets retrieves a list of available buckets
	ListBuckets(ctx context.Context, in *ListBucketsRequest, opts ...grpc.CallOption) (*ListBucketsResponse, error)
	// VerifyBucketAccess verifies access to a specific bucket
	VerifyBucketAccess(ctx context.Context, in *VerifyBucketAccessRequest, opts ...grpc.CallOption) (*VerifyBucketAccessResponse, error)
	// CheckResourceReadiness checks if all required resources are ready
	CheckResourceReadiness(ctx context.Context, in *CheckResourceReadinessRequest, opts ...grpc.CallOption) (*CheckResourceReadinessResponse, error)
}

type bucketServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBucketServiceClient(cc grpc.ClientConnInterface) BucketServiceClient {
	return &bucketServiceClient{cc}
}

func (c *bucketServiceClient) ListBuckets(ctx context.Context, in *ListBucketsRequest, opts ...grpc.CallOption) (*ListBucketsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ListBucketsResponse)
	err := c.cc.Invoke(ctx, BucketService_ListBuckets_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) VerifyBucketAccess(ctx context.Context, in *VerifyBucketAccessRequest, opts ...grpc.CallOption) (*VerifyBucketAccessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(VerifyBucketAccessResponse)
	err := c.cc.Invoke(ctx, BucketService_VerifyBucketAccess_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *bucketServiceClient) CheckResourceReadiness(ctx context.Context, in *CheckResourceReadinessRequest, opts ...grpc.CallOption) (*CheckResourceReadinessResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckResourceReadinessResponse)
	err := c.cc.Invoke(ctx, BucketService_CheckResourceReadiness_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BucketServiceServer is the server API for BucketService service.
// All implementations must embed UnimplementedBucketServiceServer
// for forward compatibility.
//
// Bucket service definition
type BucketServiceServer interface {
	// ListBuckets retrieves a list of available buckets
	ListBuckets(context.Context, *ListBucketsRequest) (*ListBucketsResponse, error)
	// VerifyBucketAccess verifies access to a specific bucket
	VerifyBucketAccess(context.Context, *VerifyBucketAccessRequest) (*VerifyBucketAccessResponse, error)
	// CheckResourceReadiness checks if all required resources are ready
	CheckResourceReadiness(context.Context, *CheckResourceReadinessRequest) (*CheckResourceReadinessResponse, error)
	mustEmbedUnimplementedBucketServiceServer()
}

// UnimplementedBucketServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedBucketServiceServer struct{}

func (UnimplementedBucketServiceServer) ListBuckets(context.Context, *ListBucketsRequest) (*ListBucketsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListBuckets not implemented")
}
func (UnimplementedBucketServiceServer) VerifyBucketAccess(context.Context, *VerifyBucketAccessRequest) (*VerifyBucketAccessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyBucketAccess not implemented")
}
func (UnimplementedBucketServiceServer) CheckResourceReadiness(context.Context, *CheckResourceReadinessRequest) (*CheckResourceReadinessResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckResourceReadiness not implemented")
}
func (UnimplementedBucketServiceServer) mustEmbedUnimplementedBucketServiceServer() {}
func (UnimplementedBucketServiceServer) testEmbeddedByValue()                       {}

// UnsafeBucketServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BucketServiceServer will
// result in compilation errors.
type UnsafeBucketServiceServer interface {
	mustEmbedUnimplementedBucketServiceServer()
}

func RegisterBucketServiceServer(s grpc.ServiceRegistrar, srv BucketServiceServer) {
	// If the following call pancis, it indicates UnimplementedBucketServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&BucketService_ServiceDesc, srv)
}

func _BucketService_ListBuckets_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListBucketsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).ListBuckets(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketService_ListBuckets_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).ListBuckets(ctx, req.(*ListBucketsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_VerifyBucketAccess_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyBucketAccessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).VerifyBucketAccess(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketService_VerifyBucketAccess_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).VerifyBucketAccess(ctx, req.(*VerifyBucketAccessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BucketService_CheckResourceReadiness_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckResourceReadinessRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BucketServiceServer).CheckResourceReadiness(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: BucketService_CheckResourceReadiness_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BucketServiceServer).CheckResourceReadiness(ctx, req.(*CheckResourceReadinessRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// BucketService_ServiceDesc is the grpc.ServiceDesc for BucketService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BucketService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cluster.BucketService",
	HandlerType: (*BucketServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ListBuckets",
			Handler:    _BucketService_ListBuckets_Handler,
		},
		{
			MethodName: "VerifyBucketAccess",
			Handler:    _BucketService_VerifyBucketAccess_Handler,
		},
		{
			MethodName: "CheckResourceReadiness",
			Handler:    _BucketService_CheckResourceReadiness_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/cluster.proto",
}
